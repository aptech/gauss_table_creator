#include dynargs.dec
#include tabout.sdf

proc (1) = outputTable(struct tableControl tCtl, ...);
    local outNums,fname,xlsret,tmp,tmp2,tmp_fname;
    
    // Put dynamic arguments in structure
    struct regressEstimate regEst;
    regEst = _getTableInputs(...);
    
    // Load all regression results
    {tCtl,regEst} = tableSetregEst(tCtl,regEst);
    
    // Set up numeric table values
    struct regressEstimateTable regEstTable;
    {regEstTable,tCtl} = getNumsTable(tCtl, regEst);
    
    // Add Title and Notes
    if tCtl.exportfilename $!= "";
        fname = tCtl.exportfilename;
    else;
        fname = "TableOut.xlsx";
    endif;
    
    // Export Excel File
    if tCtl.exportTable == 1;
        tmp_fname = fname$+".xls";
        xlsret = SpreadsheetWrite(regEstTable.outTable,tmp_fname, "a1", 1);
    endif;
    tmp = maxc(maxc(strlen(regEstTable.outTable)));
    tmp2 = chrs(45*ones(1,(tmp+4)*cols(regEstTable.outTable)));
    
    // Export Text File
    if tCtl.exportfilename $!= "";
        fname = fname$+".asc";
        output file=^fname;
        if tCtl.printOut != 1;
            screen off;
        endif;
        output on;
        print tCtl.tableTitle;
        print tmp2;
        print /sa /off /ldn regEstTable.outTable;
        print tmp2;
        print tCtl.tableNote;
        output off;
        screen on;
    elseif tCtl.printOut == 1;
        print tCtl.tableTitle;
        print tmp2;
        print regEstTable.outTable;
        print tmp2;
        print tCtl.tableNote;
        output off;
    endif;
    retp(regEstTable);
endp;

proc (1) = _getTableInputs(...);
    local n_dynargs;
    n_dynargs = COUNT_DYNARGS;
    
    // Declare structure
    struct regressEstimate regEst;
    
    // Load coefficients
    if n_dynargs >= 1;
        regEst.coefficients = sysstate(GET_ONE_DYNARG, 1);
    endif;
    
    // Standard errors
    if n_dynargs >= 2;
        regEst.se = sysstate(GET_ONE_DYNARG, 2);
    endif;
    
    // T-stat
    if n_dynargs >= 3;
        regEst.tstat = sysstate(GET_ONE_DYNARG, 3);
    endif;
    
    // P-vals
    if n_dynargs >= 4;
        regEst.pval = sysstate(GET_ONE_DYNARG, 3);
    endif;
    
    if n_dynargs > 4;
        errorlog "outputTable: The procedure accepts 2-5 inputs";
        end;
    endif;
    retp(regEst);
endp;


proc (2) = getNumsTable(struct tableControl tCtl, struct regressEstimate regEst);
    local varlist,tmp,numCoeff,numPval,numTstat,numSe,varMat,tmpVar1,y;
    tmp = type(regEst.coefficients)*type(regEst.pval)*type(regEst.tstat)*type(regEst.se);
    
    numCoeff = rows(regEst.coefficients);
    numPval = rows(regEst.pval);
    numTstat = rows(regEst.tstat);
    numSE = rows(regEst.se);
    
    // Convert to elements in regEst to string elements
    struct regressEstimateTable regEstTable;
    regEstTable = createRegEstTable(tCtl,regEst);
    
    if tCtl.bracket $!= "";
        {regEstTable,tCtl} = _putOnBrackets(regEstTable,tCtl,regEst);
    endif;
    if tCtl.parentheses $!= "";
        {regEstTable,tCtl} =_putOnParan(regEstTable,tCtl,regEst);
    endif;
    if tCtl.asterisk != 0;
        {regEstTable,tCtl} = _putOnAsterisk(regEstTable,tCtl,regEst);
        //         regEstTable.coefficients = varMat;
    endif;
    if tCtl.diagnosticVariables $!= "";
        regEstTable = stackTableVars(regEstTable,tCtl);
    endif;
    
    retp(regEstTable,tCtl);
endp;

proc (1) = stackTableVars(struct regressEstimateTable regEstTable, struct tableControl tCtl);
    local varl,tmp,tmp1,tmp2,outTable,
        numdiagVars,numCoeff,numModels,se,coefficients,pval,tstat,
        rowLabel,colLabel;
    
    varl = tCtl.diagnosticVariables;
    se = regEstTable.se;
    coefficients = regEstTable.coefficients;
    tstat = regEstTable.tstat;
    pval = regEstTable.pval;
    
    numdiagVars = rows(varl);
    numCoeff = rows(regEstTable.coefficients);
    numModels = cols(regEstTable.coefficients);
    
    if upper(tCtl.columnStack) $== "HORIZONTAL";
        // Create string array for output table
        outTable = ntos(zeros(numCoeff+1,NumModels*numdiagVars),5);
        // Create string array for row labels
        if tCtl.variableNames $!= "";
            rowLabel = "Variables"$|tCtl.variableNames;
        else;
            rowLabel = "Variables"$|("X"$+ntos(seqa(1,1,numCoeff)));
        endif;
        
        // Create string array for col labels
        colLabel= ntos(zeros(1,NumModels*numdiagVars),5);
        for i(1,cols(regEstTable.coefficients),1);
            if tCtl.columnHeader $!= "";
                colLabel[i] = tCtl.columnHeader[i];
            else;
                colLabel[i] = "Y"$+ntos(i,10);
            endif;
            tmp = vargetl(varl[1,.]);
            tmp = colLabel[i]$|tmp[.,i];
            for cl(2,rows(varl),1);
                tmp1 = vargetl(varl[cl,.]);
                tmp1 = varl[cl,.]$|tmp1[.,i];
                tmp = tmp$~tmp1;
            endfor;
            outTable[.,(i-1)*numdiagVars+1:i*numdiagVars] = tmp;
        endfor;
        
        outTable = rowLabel$~outTable;
    elseif upper(tCtl.columnStack) $== "VERTICAL";
        // Create string array for row labels
        if tCtl.variableNames $!= "";
            colLabel = "Variables" $~ tCtl.columnHeader;
        else;
            colLabel = "Variables"$~("X"$+ntos(seqa(1,1,numModels)));
        endif;
        
        // Create string array for col labels
        rowLabel= ntos(zeros(rows(regEstTable.coefficients)*numdiagVars,1),1);
        outTable = ntos(zeros(rows(regEstTable.coefficients)*numdiagVars,cols(regEstTable.coefficients)+1),5);
        for i(1,cols(regEstTable.coefficients),1);
            for j(1,numCoeff,1);
                if i == 1;
                    if tCtl.columnHeader $!= "";
                        rowLabel[j] = tCtl.variableNames[j];
                    else;
                        rowLabel[j] = "X"+ntos(j,0);
                    endif;
                endif;
                tmp = vargetl(varl[1,.]);
                if i == 1;
                    tmp = rowLabel[j]$~tmp[j,i];
                else;
                    tmp = tmp[j,i];
                endif;
                for cl(2,rows(varl),1);
                    tmp1 = vargetl(varl[cl,.]);
                    if i == 1;
                        tmp1 = ""$~tmp1[j,i];
                    else;
                        tmp1 = tmp1[j,i];
                    endif;
                    tmp = tmp$|tmp1;
                endfor;
                if i == 1;
                    outTable[(j-1)*numdiagVars+1:j*numdiagVars,1:2] = tmp;
                else;
                    outTable[(j-1)*numdiagVars+1:j*numdiagVars,i+1] = tmp;
                endif;
            endfor;
        endfor;
        outTable = colLabel$|outTable;
    endif;
    regEstTable.outTable = outTable;
    
    retp(regEstTable);
endp;

proc (2) =_putOnAsterisk(struct regressEstimateTable regEstTable, struct tableControl tCtl, struct regressEstimate regEst);
    local numVar,numModels,tmp;
    
    numVar = rows(regEst.coefficients);
    numModels = cols(regEst.coefficients);
    tmp = strtof(regEstTable.pval);
    
    tCtl.tableNote = _AsteriskTableNote(tCtl.tableNote, tCtl.asteriskTolerance);
    regEstTable = _varAddAsterisk(regEstTable, tCtl, regEst);
    
    retp(regEstTable,tCtl);
endp;

proc (1) = _AsteriskTableNote(tableNote,tol);
    local addNote;
    addNote = chrs(42)$+"p-val<"$+ntos(tol[1],4)$+chrs(32);
    addNote = addNote$+chrs(42)$+chrs(42)$+"p-val<"$+ntos(tol[2],4)$+chrs(32);
    addNote = addNote$+chrs(42)$+chrs(42)$+chrs(42)$+"p-val<"$+ntos(tol[3],4)$+chrs(32);
    if tableNote $!= "";
        addNote = tableNote$|addNote;
    else;
        addNote = addNote;
    endif;
    retp(addNote);
endp;

proc (1) = createRegEstTable(struct tableControl tCtl, struct regressEstimate regEst);
    
    struct regressEstimateTable regEstTable;
    regEstTable.coefficients = spacingMatrix(regEst.coefficients,tCtl.sigFig);
    regEstTable.pval = spacingMatrix(regEst.pval,tCtl.sigFig);
    regEstTable.tstat = spacingMatrix(regEst.tstat,tCtl.sigFig);
    regEstTable.se = spacingMatrix(regEst.se,tCtl.sigFig);
    retp(regEstTable);
endp;

proc (1) = spacingMatrix(numMat,prec);
    local strMat,numCols,numRows;
    
    numRows = rows(numMat);
    numCols = cols(numMat);
    strMat = ntos(numMat,prec);
    
    for i(1,numRows,1);
        for j(1,numCols,1);
            if numMat[i,j] >= 0;
                strMat[i,j]= chrs(32)$+strMat[i,j];
            endif;
        endfor;
    endfor;
    retp(strMat);
endp;

proc (2) = _putOnBrackets(struct regressEstimateTable regEstTable,struct tableControl tCtl,struct regressEstimate regEst);
    
    tCtl.tableNote=_bracketTableNote(tCtl.tableNote,tCtl.bracket);
    for i(1,rows(tCtl.bracket),1);
        regEstTable = _varAddBracket(tCtl.bracket[i],regEstTable);
    endfor;
    retp(regEstTable,tCtl);
endp;

proc (1) = _bracketTableNote(tableNote,bracketVars);
    local addNote;
    
    addNote = "Estimate "$+bracketVars[1];
    for i(2,rows(bracketVars),1);
        addNote = addNote$+" ,"$+bracketVars[i]$+" ,";
    endfor;
    addNote = addNote$+" in brackets.";
    if tableNote $!= "";
        addNote = tableNote$|addNote;
    endif;
    retp(addNote);
endp;

proc (1) = _varAddBracket(varName,struct regressEstimateTable regEstTable);
    
    if upper(varName) == "SE";
        regEstTable.se = "["$+regEstTable.se$+"]";
    elseif upper(varName) == "TSTAT";
        regEstTable.tstat = "["$+regEstTable.tstat$+"]";
    elseif upper(varName) == "COEFFICIENTS";
        regEstTable.coefficients = "["$+regEstTable.coefficients$+"]";
    elseif upper(varName) == "PVAL";
        regEstTable.pval = "["$+regEstTable.pval$+"]";
    endif;
    retp(regEstTable);
endp;

proc (2) = _putOnParan(struct regressEstimateTable regEstTable,struct tableControl tCtl,struct regressEstimate regEst);
    
    tCtl.tableNote=_paranthesesTableNote(tCtl.tableNote,tCtl.parentheses);
    for i(1,rows(tCtl.parentheses),1);
        regEstTable = _varAddParan(tCtl.parentheses[i],regEstTable);
    endfor;
    retp(regEstTable,tCtl);
endp;

proc (1) = _paranthesesTableNote(tableNote,paranVars);
    local addNote;
    
    addNote = "Estimate "$+paranVars[1];
    for i(2,rows(paranVars),1);
        addNote = addNote$+" ,"$+paranVars[i]$+" ,";
    endfor;
    addNote = addNote$+" in parantheses.";
    if tableNote $!= "";
        addNote = tableNote$|addNote;
    endif;
    retp(addNote);
endp;

proc (1) = _varAddParan(varName,struct regressEstimateTable regEstTable);
    
    if upper(varName) == "SE";
        regEstTable.se = "("$+regEstTable.se$+")";
    elseif upper(varName) == "TSTAT";
        regEstTable.tstat = "("$+regEstTable.tstat$+")";
    elseif upper(varName) == "COEFFICIENTS";
        regEstTable.coefficients = "("$+regEstTable.coefficients$+")";
    elseif upper(varName) == "PVAL";
        regEstTable.pval = "("$+regEstTable.pval$+")";
    endif;
    retp(regEstTable);
endp;

proc (2) = tableSetregEst(struct tableControl tCtl,struct regressEstimate regEst);
    // Get output table
    if type(regEst.coefficients) == 6;
        tCtl.p0 = tableSetParm(tCtl,regEst.coefficients);
    endif;
    
    // Get standard error and tstat
    if type(regEst.se) == 6;
        if type(regEst.tstat) != 6;
            regEst.tstat = regEst.coefficients./regEst.se;
        endif;
        tCtl.p0 = tableSetTstat(tCtl,regEst.tstat);
        tCtl.p0 = tableSetSE(tCtl,regEst.se);
    endif;
    
    // Get pval
    if type(regEst.pval) != 6;
        regEst.pval = (2*cdfTC(abs(regEst.tstat),tctl.numObs-rows(regEst.coefficients)));
    endif;
    tCtl.p0 = tableSetPval(tCtl,regEst.pval);
    retp(tCtl,regEst);
endp;

proc (1) = tableSetTstat(struct tableControl tCtl, tstat);
    tCtl.p0 = pvPack(tCtl.p0,tstat,"tstat");
    retp(tCtl.p0);
endp;

proc (1) = tableSetParm(struct tableControl tCtl, coefficients);
    tCtl.p0 = pvPack(tCtl.p0,coefficients,"coefficients");
    retp(tCtl.p0);
endp;

proc (1) = tableSetse(struct tableControl tCtl, se);
    tCtl.p0 = pvPack(tCtl.p0,se,"se");
    retp(tCtl.p0);
endp;

proc (1) = tableSetpval(struct tableControl tCtl, pval);
    tCtl.p0 = pvPack(tCtl.p0,pval,"pval");
    retp(tCtl.p0);
endp;

proc (1) = tableGetDefaults(regType);
    
    struct tableControl tCtl;
    regType = upper(regType);
    if  regtype == "OLS";
        tCtl=_getDefaultsTabOLS;
    endif;
    retp (tCtl);
endp;

proc (1) = _getDefaultsTabOLS;
    struct tableControl tOut;
    
    tOut.sigFig = 5;
    tOut.valueJustification = "left";
    tOut.numObs = 0;
    tOut.exportTable = 0;
    
    // Indicates how to stack the columns of information
    // Horizontal or Vertical
    tOut.columnStack = "Vertical";
    //     tOut.diasnosticVariables = 0;
    
    // Add significant coefficient stars
    tOut.asterisk = 0;
    tOut.asteriskVariable = "tstat";
    tOut.asteriskTolerance = 0.001~0.05~0.01;
    
    // Add table and notes
    tableSetTitle(&tOut,"Linear regression");
    tOut.exportfilename = "tabout";
    
    // PV Output structure
    struct PV p0;
    p0 = pvCreate();
    tOut.p0 = p0;
    retp(tOut);
endp;

proc (0) = _dc_printTable(sa,s1,x,s2);
    
    local m0,m1,t,ss,s5,tmp,table_fmt;
    
    // Add space to end of variable names
    if sa[1] $== "";
        sa = "  ";
        for i(1,rows(x),1);
            sa = sa $| "  ";
        endfor;
    endif;
    
    
    m0 = maxc(strlen(sa));
    m0 = m0 + 2;
    
    // Add space to end of first column header
    s1 = s1 $+ " ";
    // Assign character length to array cells
    if s1 $== "";
        m0 = m0 + 2;
        s1 =  chrs(32*ones(1,m0));
    elseif m0 == strlen(s1);
        m0 = m0 + 2;
        s1 = s1 $+ "  ";
    elseif m0 > strlen(s1);
        m1 = ceil(0.5*(m0-strlen(s1)));
        ss = chrs(32*ones(1,m1));
        s1 = ss$+s1$+ss;
        if strlen(s1) > m0;
            m0 = strlen(s1);
        endif;
    else;
        m0 = strlen(s1);
    endif;
    
    for i(1,rows(sa),1);
        sa[i] = sa[i]$+chrs(32*ones(1,m0-strlen(sa[i])));
    endfor;
    
    // Add spaces to the end of output labels
    t = 11;
    if s2[1] $== "";
        s5 = chrs(32*ones(1,11));
        for i(1,cols(x),1);
            s2 = s2 $+ s5;
        endfor;
    else;
        m0 = maxc(strlen(s2'));
        // Count spaces for m0
        if m0 > 10;
            t = m0 + 1;
        endif;
        // Add spacing to s2
        for i(1,cols(s2),1);
            s2[1,i] = s2[1,i]$+chrs(32*ones(1,m0-strlen(s2[1,i])+1));
        endfor;
    endif;
    
    // Table format to fit data
    table_fmt = "% -"$+ftos(t,"*.*lf",1,0)$+".4lf";
    print ((s1$|sa)$~(s2$|ftostrc(x,table_fmt)));
endp;
proc (1) = _varAddAsterisk(struct regressEstimateTable regEstTable, struct tableControl tCtl, struct regressEstimate regEst);
    local varName, numVar, numModels, tmp;
    
    varName = tCtl.asteriskVariable;
    numVar = rows(regEst.coefficients);
    numModels = cols(regEst.coefficients);
    tmp = strtof(regEstTable.pval);
    
    if upper(varName) $== "SE";
        for i(1,numVar,1);
            for j(1,numModels,1);
                if tmp[i,j]<tCtl.asteriskTolerance[1];
                    regEstTable.se[i,j] = regEstTable.se[i,j]$+chrs(42);
                endif;
                if tmp[i,j]<tCtl.asteriskTolerance[2];
                    regEstTable.se[i,j] = regEstTable.se[i,j]$+chrs(42);
                endif;
                if tmp[i,j]<tCtl.asteriskTolerance[3];
                    regEstTable.se[i,j] = regEstTable.se[i,j]$+chrs(42);
                endif;
            endfor;
        endfor;
    elseif upper(varName) $== "TSTAT";
        for i(1,numVar,1);
            for j(1,numModels,1);
                if tmp[i,j]<tCtl.asteriskTolerance[1];
                    regEstTable.tstat[i,j] = regEstTable.tstat[i,j]$+chrs(42);
                endif;
                if tmp[i,j]<tCtl.asteriskTolerance[2];
                    regEstTable.tstat[i,j] = regEstTable.tstat[i,j]$+chrs(42);
                endif;
                if tmp[i,j]<tCtl.asteriskTolerance[3];
                    regEstTable.tstat[i,j] = regEstTable.tstat[i,j]$+chrs(42);
                endif;
            endfor;
        endfor;
    elseif upper(varName) $== "COEFFICIENTS";
        for i(1,numVar,1);
            for j(1,numModels,1);
                if tmp[i,j]<tCtl.asteriskTolerance[1];
                    regEstTable.coefficients[i,j] = regEstTable.coefficients[i,j]$+chrs(42);
                endif;
                if tmp[i,j]<tCtl.asteriskTolerance[2];
                    regEstTable.coefficients[i,j] = regEstTable.coefficients[i,j]$+chrs(42);
                endif;
                if tmp[i,j]<tCtl.asteriskTolerance[3];
                    regEstTable.coefficients[i,j] = regEstTable.coefficients[i,j]$+chrs(42);
                endif;
            endfor;
        endfor;
    elseif upper(varName) $== "PVAL";
        for i(1,numVar,1);
            for j(1,numModels,1);
                if tmp[i,j]<tCtl.asteriskTolerance[1];
                    regEstTable.pval[i,j] = regEstTable.pval[i,j]$+chrs(42);
                endif;
                if tmp[i,j]<tCtl.asteriskTolerance[2];
                    regEstTable.pval[i,j] = regEstTable.pval[i,j]$+chrs(42);
                endif;
                if tmp[i,j]<tCtl.asteriskTolerance[3];
                    regEstTable.pval[i,j] = regEstTable.pval[i,j]$+chrs(42);
                endif;
            endfor;
        endfor;
    endif;
    retp(regEstTable);
endp;
